---
title: "Análise Multinível SAEB 2019"
author: "Tailine J. S. Nonato"
date: today
format: html
---

# Sumário

1. Modelo Nulo

2. Adição de variáveis do primeiro nível (aluno)

3. Adição de variáveis do segundo nível (escola)

4. Adição de efeitos aleatórios do primeiro nível

5. Comparação entre modelos utilizando X²

6. Análise de resíduos

7. Definição do melhor modelo

# Next steps

- [ ] Nível socioeconômico escola

- [ ] Recode (área e localização)

- [ ] Recode (Escolaridade)

- [ ] Random effects

# Setup

```{r}
#| warning: false
#| label: pacotes

if (!require(pacman)) install.packages("pacman")
pacman::p_load(vroom,tidyverse,lme4,sjPlot,knitr) 
setwd("C:/Users/User/Documents/GitHub/gradest-1/TCC/relatorio")
```

## Leitura dos dados
```{r}	
#| warning: false
#| eval: false
#| echo: false
#| label: dados1

df <- vroom("dados_tcc.csv")%>%
  select(ID_ALUNO,ID_ESCOLA,PROFICIENCIA_MT_SAEB,PROFICIENCIA_LP_SAEB, NSE_esc, ID_AREA, ID_LOCALIZACAO, TX_RESP_Q002, TX_RESP_Q004, escolaridade, reprov, NSE_pca)

kable(head(df))

df_used <- df %>%
  filter(across(everything(), ~ !(. %in% c("*", ".")))) %>%
  na.omit(df_used)

write_csv(df_used, "df_used.csv")
```	

```{r}	
#| warning: false
#| label: dados2

df_used <- vroom("df_used.csv")

df_used$reprov <- ifelse(df_used$TX_RESP_Q015 == "A", 0, ifelse(df_used$TX_RESP_Q015 == "B", 1, 2))
```


```{r}
#| warning: false
#| eval: false
#| echo: false
#| label: exploratoria_num

# Exploratória (var. numéricas)

plot(y = df_used$PROFICIENCIA_LP_SAEB, x = df_used$pont, main = "Proficiência em Língua Portuguesa x NSE Aluno", xlab = "NSE Aluno", ylab = "Proficiência")
plot(y = df_used$PROFICIENCIA_MT_SAEB, x = df_used$pont, main = "Proficiência em Matemática x NSE Aluno", xlab = "NSE Aluno", ylab = "Proficiência")

plot(y = df_used$PROFICIENCIA_LP_SAEB, x = df_used$NSE_pca, main = "Proficiência em Língua Portuguesa x NSE Escola", xlab = "NSE Escola", ylab = "Proficiência")
plot(y = df_used$PROFICIENCIA_MT_SAEB, x = df_used$NSE_pca, main = "Proficiência em Matemática x NSE Escola", xlab = "NSE Escola", ylab = "Proficiência")

plot(y = df_used$PROFICIENCIA_LP_SAEB, x = df_used$escolaridade, main = "Proficiência em Língua Portuguesa x escolaridade")
plot(y = df_used$PROFICIENCIA_MT_SAEB, x = df_used$escolaridade, main = "Proficiência em Matemática x escolaridade", xlab = "escolaridade", ylab = "Proficiência")
```

# Modelos

## Língua Portuguesa

- **Marginal R^2 (R^2m)**:  the proportion of variance explained by the fixed effects relative to the overall variance 

- **Conditional R^2 (R^2c)**: the proportion of variance explained by both fixed and random effects relative to the overall variance 

### Modelo 0
```{r}
#| warning: false 
#| label: modelo0_lp
modelo_nulo_lp <- lmer(PROFICIENCIA_LP_SAEB ~ 1 + (1|ID_ESCOLA), data = df_used)
summary(modelo_nulo_lp)
tab_model(modelo_nulo_lp, show.icc = TRUE, title="Modelo Nulo")
```	

### Modelo 1
```{r}
#| warning: false
#| label: modelo1_lp
modelo1_lp <- lmer(PROFICIENCIA_LP_SAEB ~ TX_RESP_Q002 + escolaridade + reprov + NSE_pca + (1|ID_ESCOLA), data = df_used)
summary(modelo1_lp)
tab_model(modelo1_lp, show.icc = TRUE, title="Modelo com adição de variáveis do primeiro nível")
```

### Modelo 2
```{r}
#| warning: false
#| label: modelo2_lp
modelo2_lp <- lmer(PROFICIENCIA_LP_SAEB ~ TX_RESP_Q002 + escolaridade + reprov + NSE_pca + NSE_esc + ID_AREA +  ID_LOCALIZACAO + (1|ID_ESCOLA), data = df_used)
summary(modelo2_lp)
tab_model(modelo2_lp, show.icc = TRUE, title="Modelo com adição de variáveis do segundo nível")
```

### Modelo 3
```{r}
#| warning: false
#| eval: false
#| label: modelo3_lp1
modelo3_lp <- lmer(PROFICIENCIA_LP_SAEB ~ TX_RESP_Q002 + escolaridade + reprov + NSE_pca + NSE_esc + ID_AREA +  ID_LOCALIZACAO + (1 + reprov|ID_ESCOLA), data = df_used)
#summary(modelo3_lp)
tab_model(modelo3_lp, show.icc = TRUE, title="Modelo com adição de efeitos aleatórios do primeiro nível")
```

```{r}
#| warning: false
#| eval: false
#| label: modelo3_lp2
modelo3_lp <- lmer(PROFICIENCIA_LP_SAEB ~ TX_RESP_Q002 + escolaridade + reprov + NSE_pca + NSE_esc + ID_AREA +  ID_LOCALIZACAO + (1 + TX_RESP_Q002|ID_ESCOLA), data = df_used)
#summary(modelo3_lp)
tab_model(modelo3_lp, show.icc = TRUE, title="Modelo com adição de efeitos aleatórios do primeiro nível")
```

```{r}
#| warning: false
#| eval: false
#| label: modelo3_lp3
modelo3_lp <- lmer(PROFICIENCIA_LP_SAEB ~ TX_RESP_Q002 + escolaridade + reprov + NSE_pca + NSE_esc  + ID_AREA +  ID_LOCALIZACAO + (1 + NSE_pca|ID_ESCOLA), data = df_used)
#summary(modelo3_lp)
tab_model(modelo3_lp, show.icc = TRUE, title="Modelo com adição de efeitos aleatórios do primeiro nível")
```

```{r}
#| warning: false
#| eval: false
#| label: modelo3_lp4
modelo3_lp <- lmer(PROFICIENCIA_LP_SAEB ~ TX_RESP_Q002 + escolaridade + reprov + NSE_pca + NSE_esc  + ID_AREA +  ID_LOCALIZACAO + (1 + NSE_pca + reprov|ID_ESCOLA), data = df_used)
summary(modelo3_lp)
#tab_model(modelo3_lp, show.icc = TRUE, title="Modelo com adição de efeitos aleatórios do primeiro nível")
```

- nse_esc * reprov 

- nse_esc * escolaridade 

- grupos raciais (branco+amarelo, cc)


### Comparação entre modelos
```{r}
#| warning: false
#| label: comparacaolp
kable(anova(modelo_nulo_lp, modelo1_lp))
kable(anova(modelo1_lp, modelo2_lp))
#kable(anova(modelo2_lp, modelo3_lp))
```

### Análise de resíduos (Modelos com efeitos aleatórios)
```{r}
#| warning: false
#| eval: false
#| label: residuos_lp
residuos_lp <- resid(modelo3_lp)
qqnorm(residuos_lp)
qqline(residuos_lp)
```

## Matemática

### Modelo 0
```{r}
#| warning: false
#| label: modelo0_mt
modelo_nulo_mt <- lmer(PROFICIENCIA_MT_SAEB ~ 1 + (1|ID_ESCOLA), data = df_used)
summary(modelo_nulo_mt)
tab_model(modelo_nulo_mt, show.icc = TRUE)
```	

### Modelo 1
```{r}
#| warning: false
#| label: modelo1_mt
modelo1_mt <- lmer(PROFICIENCIA_MT_SAEB ~  TX_RESP_Q002 + escolaridade + reprov + (1|ID_ESCOLA), data = df_used)
summary(modelo1_mt)
tab_model(modelo1_mt, show.icc = TRUE, title="Modelo com adição de variáveis do primeiro nível")
```

### Modelo 2
```{r}
#| warning: false
#| label: modelo2_mt
modelo2_mt <- lmer(PROFICIENCIA_MT_SAEB ~  TX_RESP_Q002 + escolaridade + reprov + NSE_pca + NSE_esc + ID_AREA +  ID_LOCALIZACAO + (1|ID_ESCOLA), data = df_used)
summary(modelo2_mt)
tab_model(modelo2_mt, show.icc = TRUE, title="Modelo com adição de variáveis do segundo nível")
```	

### Modelo 3
```{r}
#| warning: false
#| eval: false
#| label: modelo3_mt1
modelo3_mt <- lmer(PROFICIENCIA_MT_SAEB ~  TX_RESP_Q002 + escolaridade + reprov + NSE_pca + NSE_esc + ID_AREA +  ID_LOCALIZACAO + (1 + reprov|ID_ESCOLA), data = df_used)
#summary(modelo3_mt)
tab_model(modelo3_mt, show.icc = TRUE, title="Modelo com adição de efeitos aleatórios do primeiro nível")
```	

```{r}
#| warning: false
#| eval: false
#| label: modelo3_mt2
modelo3_mt <- lmer(PROFICIENCIA_MT_SAEB ~  TX_RESP_Q002 + escolaridade + reprov + NSE_pca + NSE_esc + ID_AREA +  ID_LOCALIZACAO + (1 + TX_RESP_Q002|ID_ESCOLA), data = df_used)
#summary(modelo3_mt)
tab_model(modelo3_mt, show.icc = TRUE, title="Modelo com adição de efeitos aleatórios do primeiro nível")
```	

```{r}
#| warning: false
#| eval: false
#| label: modelo3_mt3
modelo3_mt <- lmer(PROFICIENCIA_MT_SAEB ~  TX_RESP_Q002 + escolaridade + reprov + NSE_pca + NSE_esc + ID_AREA +  ID_LOCALIZACAO + (1 + NSE_pca|ID_ESCOLA), data = df_used)
#summary(modelo3_mt)
tab_model(modelo3_mt, show.icc = TRUE, title="Modelo com adição de efeitos aleatórios do primeiro nível")
```	

```{r}
#| warning: false
#| eval: false
#| label: modelo3_mt4
modelo3_mt <- lmer(PROFICIENCIA_MT_SAEB ~  TX_RESP_Q002 + escolaridade + reprov + NSE_pca + NSE_esc + ID_AREA +  ID_LOCALIZACAO + (1 + NSE_pca|ID_ESCOLA) + (1 + reprov|ID_ESCOLA), data = df_used)
#summary(modelo3_mt)
tab_model(modelo3_mt, show.icc = TRUE, title="Modelo com adição de efeitos aleatórios do primeiro nível")
```	

### Comparação entre modelos

```{r}
#| warning: false
#| label: comparacaomt
kable(anova(modelo_nulo_lp, modelo1_lp))
kable(anova(modelo1_lp, modelo2_lp))
#kable(anova(modelo2_mt, modelo3_mt))
```

## Análise de resíduos (Modelos com efeitos aleatórios)


```{r}
#| warning: false
#| eval: false
#| label: residuos_mt
residuos_mt <- resid(modelo3_mt)
qqnorm(residuos_mt)
qqline(residuos_mt)
```